DROP TRIGGER IF EXISTS TR_INSERT_LOCALE $
DROP TRIGGER IF EXISTS TR_UPDATE_LOCALE $
DROP PROCEDURE IF EXISTS FK_PARENT_LOCALES $

DROP TABLE IF EXISTS locales $
DROP TABLE IF EXISTS quotes $
DROP TABLE IF EXISTS works $
DROP TABLE IF EXISTS authors $

CREATE TABLE authors (
	`id` INTEGER AUTO_INCREMENT NOT NULL,
	`slug` VARCHAR(255) UNIQUE NOT NULL,
	`image` LONGBLOB,
	`image_attribution` VARCHAR(255),
	PRIMARY KEY (`id`)
) $

CREATE TABLE works (
	`id` INTEGER AUTO_INCREMENT NOT NULL,
	`slug` VARCHAR(255) UNIQUE NOT NULL,
	`author_id` INTEGER NOT NULL,
	PRIMARY KEY (`id`),
	CONSTRAINT `FK_WORK_AUTHOR` FOREIGN KEY (`author_id`) REFERENCES `authors` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
) $

CREATE TABLE quotes (
	`id` INTEGER AUTO_INCREMENT NOT NULL,
	`schedule` VARCHAR(8) NOT NULL,
	`year` VARCHAR(8),
	`time` VARCHAR(8),
	`language` VARCHAR(8) NOT NULL,
	`corpus` TEXT NOT NULL,
	`source` VARCHAR(255),
	`meta` VARCHAR(255),
	`curator` VARCHAR(255),
	`locked` BOOLEAN NOT NULL DEFAULT 0,
	`work_id` INTEGER NOT NULL,
	PRIMARY KEY (`id`),
	CONSTRAINT `FK_QUOTE_WORK` FOREIGN KEY (`work_id`) REFERENCES `works` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
) $

CREATE TABLE wikidataids (
	`id` INTEGER AUTO_INCREMENT NOT NULL,
	`wikidata_id` INTEGER UNIQUE NOT NULL,
	`author_id` INTEGER DEFAULT NULL,
	`work_id` INTEGER DEFAULT NULL,
	PRIMARY KEY (`id`),
	CONSTRAINT `FK_WIKIDATA_AUTHOR` FOREIGN KEY (`author_id`) REFERENCES `authors` (`id`) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT `FK_WIKIDATA_WORK` FOREIGN KEY (`work_id`) REFERENCES `works` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
) $

CREATE TABLE locales (
	`id` INTEGER AUTO_INCREMENT NOT NULL,
	`author_id` INTEGER DEFAULT NULL,
	`work_id` INTEGER DEFAULT NULL,
	`language` VARCHAR(8) NOT NULL,
	`name` VARCHAR(255) NOT NULL,
	`href` VARCHAR(255),
	PRIMARY KEY (`id`),
	CONSTRAINT `FK_LOCALE_AUTHOR` FOREIGN KEY (`author_id`) REFERENCES `authors` (`id`) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT `FK_LOCALE_WORK` FOREIGN KEY (`work_id`) REFERENCES `works` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
) $

CREATE PROCEDURE FK_PARENT_LOCALES()
BEGIN
	IF ((NEW.author_id IS NULL AND NEW.work_id IS NULL) || (NEW.author_id IS NOT NULL AND NEW.work_id IS NOT NULL))
	THEN
		SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = 'Foreign key constraint on parent fails';
	END IF;
END $

CREATE TRIGGER TR_INSERT_LOCALE BEFORE INSERT ON `locales` FOR EACH ROW
BEGIN
	CALL FK_PARENT_LOCALES();
END $

CREATE TRIGGER TR_UPDATE_LOCALE BEFORE INSERT ON `locales` FOR EACH ROW
BEGIN
	CALL FK_PARENT_LOCALES();
END $
